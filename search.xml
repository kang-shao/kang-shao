<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[面向对象(上)]]></title>
    <url>%2F2019%2F02%2F11%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A%2F</url>
    <content type="text"><![CDATA[面向对象的概念面向对象是一种符合人类思维的编程思想。现实生活中存在各种形态的不同的事物，这些事物之间存在着各种各样的联系。在程序中使用对象来映射现实中的事物，使用对象的关系来描述事物之间的联系，这种思想就是面向对象。 面向过程：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一一实现，使用的时候依次调用就可以了。 面向对象则是把构成问题的事务按照一定规则划分为多个独立的对象，然后通过调用对象的方法来解决问题。当然，一个程序会包含多个对象，通过多个对象的相互配合来实现应用程序的功能，这样当应用程序功能发生变动时，只需要修改个别的对象就可以了，从而使代码更容易得到维护。面向对象的特点可以概括为封装性、继承性、多态性。 封装性 封装是面向对象的核心思想，将对象的属性和行为封装起来，不需要让外界知道具体实现细节，这就是封装思想。 继承性 继承性主要描述的是类与类之间的关系，通过继承，可以在无需重新编写原有类的情况下，对原有类的功能进行拓展。继承不仅增强了代码的复用性，提高了开发效率，还为程序的维护补充提供了便利。 多态性 多态性指的是在程序中允许出现重名现象，它指在一个类中定义的属性和方法被其他类继承后，它们可以具有不同的数据类型或表现出不同的行为，这使得同一个属性和方法在不同的类中具有不同的语义。 类与对象面向对象的编程思想，力图让程序中对事物的描述与该事物在现实中的形态保持一致。为了做到这一点，面向对象的思想中提出了二个概念，即类和对象。类是对某一类事物的抽象描述，而对象用于表示现实中该类事物的个体。 类用于描述多个对象的共同特征，它是对象的模板。对象用于描述现实中的个体，它是类的实例。对象是根据类创建的，并且一个类可以对应多个对象。 类的定义类是对象的抽象，它用于描述一组对象的共同特征和行为。类中可以定义成员变量和成员方法，其中成员变量用于描述对象的特征，也被称作属性；成员方法用于描述对象的行为，可以简称为方法。实例如下： 1234567class Person&#123; int age; //定义int类型的变量age //定义speak（）方法 void speak()&#123; System.out.println(&quot;大家好，我今年&quot;+age+&quot;岁&quot;); &#125;&#125; Person 是类名，age是成员变量，speak()是成员方法。在成员方法speak()中可以直接访问成员变量age。 对象的创建与使用应用程序想要完成具体的功能，仅有类是远远不够的，还需要根据类创建实例对象。在Java程序中可以使用new关键字来创建对象，如下： 12类名 对象名称 = new 类名();Person p = new Person();//例子 “new Person()”用于创建Person类的一个实例对象，”Person p”则是声明了一个Person类型的变量p。中间的等号用于将Person对象在内存中的地址赋值给变量p，这样变量p便持有了对象的引用。为了方便描述，通常会将变量p引用的对象简称为p对象。 在创建Person对象后，可以通过对象的引用来访问对象所有的成员。 对象引用.对象成员 具体如下实例 p1、p2分别引用了Person类的二个实例对象。p1对象和p2对象是二个完全独立的个体，它们分别拥有各自的age属性，对p1对象的age属性进行赋值并不会影响到p2对象age的属性。 在实例化对象时，Java虚拟机会自动为成员变量进行初始化，针对不同类型的成员变量，Java虚拟机会赋予不同的初始值。如下所示： 当对象被实例化以后，在程序中可以通过对象的引用变量来访问该对象的成员。需要注意的是，当没有任何变量引用这个对象时，它将成为垃圾对象，不能在被使用。 类的设计例子：先定义一个学生类(Student),在这个类中定义二个属性name、age，分别表示学生的姓名和年龄，定义一个方法introduce()表示学生的自我介绍。 123456789public class Student &#123; String name; //定义一个姓名属性 int age; //定义一个年龄属性 public void introduce()&#123; //方法中打印属性name和age的值 System.out.println(&quot;大家好，我叫&quot;+name+&quot;,我今年&quot;+age+&quot;岁！&quot;); &#125;&#125; 类的封装所谓类的封装是指在定义一个类时，将类中的属性私有化，即使用private关键字来修饰。私有属性只能在它所在类中被访问，如果外界想要访问私有属性，需要提供一些使用public修饰的公有方法，其中包括用于获取属性值的getXxx方法和设置属性值的setXxx方法。具体如下： 当获取年龄不合法时，age属性没有被赋值，认为初值0。 构造方法实例化一个类的对象以后，如果要为这个对象中的属性赋值，则必须要通过直接访问对象的属性或调用setXxx方式才可以。如果需要在实例化对象的同时就为这个对象属性进行赋值，可以通过构造方法来实现。构造方法是类的一个特殊成员，它会在类实例化对象时被自动调用。 构造方法的定义在一个类中定义的方法如果同时满足以下3个条件，该方法称为构造方法。 方法名与类名相同。 在方法名的前面没有返回值类型的声明。 在方法中不能使用return语句返回一个值，但是可以单独写return语句来作为方法的结束。 如下： 构造方法的重载与普通方法一样，构造方法也可以重载，在一个类中可以定义多个构造方法，只要每个构造方法的参数类型或参数个数不同即可。在创建对象时，可以通过不同的构造方法来为不同的属性进行赋值。如下例子： 注意： 在Java中的每一个类都至少有一个构造方法，如果在一个类中没有定义构造方法，系统会自动为这个类创建一个默认的构造方法，这个默认的构造方法没有参数，在其方法体中没有任何代码，即什么都不做。 private关键字修饰的构造方法Person()只能在Person类中被访问。也就是说，Person()构造方法是私有的，不能被外界调用，也就无法在类的外部创建该类的实例对象。因此，为了方便实例化对象，构造方法通常会使用public来修饰。 this关键字为了解决导致成员变量和局部变量的名称冲突，Java中提供了一个关键字this来指代当前对象，用于在方法中访问对象的其它成员。 this关键字在程序中的3种常见用法 通过this关键字可以明确地去访问一个类的成员变量，解决与局部变脸名称冲突问题。 通过this关键字调用成员方法。 构造方法是在实例化对象时被Java虚拟机自动调用的，在程序中不能像调用其他方法一样去调用构造方法，但可以在一个构造方法中使用“this([参数 1,参数 2 ….])”的形式来调用其他的构造方法。 在使用this调用类的构造方法时，应注意以下几点。 只能在构造方法中使用this调用其他的构造方法，不能在成员方法中使用。 在构造方法中，使用this调用构造方法的语句必须位于第一行，且只能出现一次。 不能在一个类的二个构造方法中使用this互相调用。 垃圾回收在Java中，当一个对象成为垃圾后仍会占有内存空间，时间一长，就会导致内存空间的不足。针对这种情况，Java中引用了垃圾回收机制。有了这种机制，程序员不需要过多的关心垃圾对象回收的问题，Java虚拟机会自动回收垃圾对象所占用的内存空间。 一个对象在成为垃圾后会暂时地保存到内存中，当这样的垃圾堆积到一定程度时，Java虚拟机就会启动垃圾回收器将这些垃圾对象从内存中释放，从而使程序获得更多的内存空间。除了等待Java虚拟机进行自动垃圾回收以外，还可以通过调用System.gc()方法来通知Java虚拟机立即进行垃圾回收。当一个对象在内存中被释放时，它的finalize()方法会自动被调用，因此可以在类中通过定义finalize()方法来观察对象何时被释放。 static关键字在Java中定义了一个static关键字，它用于修饰类的成员，如成员变量、成员方法以及代码块等，被static修饰的成员具备一些特殊性。 静态变量在定义一个类时，只是在描述某类事物的特征和行为，并没有产生具体的数据。只有通过new关键字创建类的实例对象后，系统才会为每个对象分配空间，存储各自的数据。有时候，开发人员会希望某些特定的数据只有一份，而且能够被一个类的所有实例对象所共享。 在一个Java类中，可以使用static关键字来修饰成员变量，该变量被称作静态变量。静态变量被所有实例共享，可以使用”类名.变量名”的形式来访问。 static关键字只能用于修饰成员变量，不能用于修饰局部变量，否则编译会报错。 静态方法在实际开发过程中，开发人员希望在不创建对象的情况下就可以调用某个方法，换句话说也就是使该方法不必和对象绑在一起。要实现这样的效果，只需要在类中定义的方法前加上static关键字即可，通常称这种方法为静态方法。同静态变量一样，静态方法可以使用”类名.方法名”的方式来访问，也可以通过类的实例对象来访问。 在一个静态方法中只能访问用static修饰的成员，原因在于没有被static修饰的成员需要先创建对象才能访问，而静态方法可以在被调用时可以不创建任何对象。 静态代码块在Java类中，使用一对大括号包围起来的若干行代码被称为一个代码块，使用static关键字修饰代码块称为静态代码块。当类被加载时，静态代码块会执行，由于类只加载一次，因此静态代码块只执行一次。在程序中，通常会使用静态代码块来对类的成员变量进行初始化。 Java虚拟机首先会加载类Example01,在加载类的同时就会执行该类的静态代码块，紧接着会调用main()方法。在该方法中创建了二个Person对象，但在二次实例化对象的过程中，静态代码块中的内容只输出一次，这就说明静态代码块在类第一次使用时才会被加载，而且只会加载一次。 成员内部类在Java中，允许在一个类的内部定义一个类，这样的类称作内部类，这个内部类所在的类称作外部类。根据内部类的位置、修饰符和定义的方式可分为成员内部类、静态内部类、方法内部类。 在成员内部类中，可以访问外部类的成员。 如果想通过外部类去访问内部类,则需要通过外部类对象去创建内部类对象，创建内部类对象的具体语法格式如下： 外部类名.内部类名 变量名 = new 外部类名().new 内部类名(); 需要注意的是，如果内部类被声明私有，外界将无法访问。 本章小结超市购物程序设计123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package cn.itcast.shop;public class Product &#123;//商品 private String proName;//商品名 public String getProName()&#123; return proName; &#125; public void setProName(String proName)&#123; this.proName = proName; &#125;&#125;package cn.itcast.shop;public class Market &#123;//超市 private String marketName;//超市名 private Product[] productArr;//超市的仓库，里面有若干商品 public String getMarketName()&#123; return marketName; &#125; public void setMarketName(String marketName)&#123; this.marketName = marketName; &#125; public Product[] getProductArr()&#123; return productArr; &#125; public void setProductArr(Product[] productArr)&#123; this.productArr = productArr; &#125; Product sell(String name)&#123;//卖货，指定商品名 //循环遍历仓库中每一个商品 for(int i=0;i&lt;productArr.length;i++)&#123; //如果商品名称和要买的商品一致 if(productArr[i].getProName()==name)&#123; return productArr[i];//将该商品返回 &#125; &#125; return null;//循环结束后没有找到商品，返回null代表没有买到 &#125;&#125;package cn.itcast.shop;public class Person &#123; //人 private String name; //人名 public String getName()&#123; return name; &#125; public void setName(String name)&#123; this.name=name; &#125; //购物，指定去那个超市，商品名 Product shopping(Market market,String name)&#123; //调用超市的卖货方法，指定商品名，把卖出的结果返回 return market.sell(name); &#125;&#125;package cn.itcast.shop;public class Shopping &#123; public static void main(String[] args)&#123; //创建商品对象，给名字赋值 Product p1 = new Product(); Product p2 = new Product(); Product p3 = new Product(); Product p4 = new Product(); Product p5 = new Product(); p1.setProName(&quot;电视机&quot;); p2.setProName(&quot;洗衣机&quot;); p3.setProName(&quot;豆浆机&quot;); p4.setProName(&quot;空调机&quot;); p5.setProName(&quot;吹风机&quot;); //创建超市对象，给超市名字赋值，给仓库赋值 Market m = new Market(); m.setMarketName(&quot;家乐福&quot;); m.setProductArr(new Product[]&#123;p1,p2,p3,p4,p5&#125;); //创建人对象，给名字赋值 Person p = new Person(); p.setName(&quot;小韩&quot;); //调用购物方法，指定超市和商品名，得到购物结果 Product result = p.shopping(m, &quot;豆浆机&quot;); //根据结果进行判断 if(result!=null)&#123; System.out.println(p.getName()+&quot;在&quot;+m.getMarketName()+&quot;买到了&quot;+result.getProName()); &#125;else&#123; System.out.println(p.getName()+&quot;白跑了一趟，在&quot;+m.getMarketName()+&quot;什么也没有买到了&quot;); &#125; &#125;&#125; 银行新用户现金业务办理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package cn.itcast.bank;public class Bank &#123; static String bankName;//定义静态变量银行名称 private String name; //储户姓名 private String password; //密码 private double balance;//账户余额 private double turnover;//交易额 //静态方法，打印出银行欢迎语句 static void welcome()&#123; System.out.println(&quot;欢迎来到&quot;+bankName+&quot;--------------&quot;); &#125; //构造方法 开户 public Bank(String name,String password,double turnover)&#123; //将变量赋值给成员变量 this.name=name; this.password=password; this.turnover=turnover; this.balance=turnover-10; System.out.println(name+&quot;开户成功，账户余额&quot;+balance); &#125; //存款 public void deposit(double turnover)&#123; balance = balance+turnover; System.out.println(name+&quot;您好,您的账户 已存入&quot;+turnover+&quot;元，当前余额&quot;+balance+&quot;元&quot;); &#125; //取款 public void withdrawal(String password,double turnover)&#123; //根据传入的变量与成员变量比对，判断密码是否正确 if(this.password!=password)&#123; System.out.println(&quot;输入密码错误&quot;); return; &#125; //判断余额是否充足 if(balance-turnover&gt;0)&#123; balance=balance-turnover; System.out.println(name+&quot;您好，您的账户 以取出&quot;+turnover+&quot;元，当前余额&quot;+balance+&quot;元&quot;); &#125;else&#123; System.out.println(&quot;对不起，账户余额不足！&quot;); &#125; &#125; //静态方法，打印出银行欢迎下次光临语句 static void welcomeNext()&#123; System.out.println(&quot;欢迎下次光临&quot;+bankName+&quot;-----------&quot;); &#125;&#125;package cn.itcast.bank;public class Trade &#123; public static void main(String[] args)&#123; //定义一家银行（给静态变量赋值，可以直接使用类名访问） Bank.bankName=&quot;招商银行&quot;; //调用静态方法，银行打印欢迎语句 Bank.welcome(); //通过构造方法进行开户操作 Bank bank = new Bank(&quot;小梦&quot;,&quot;654321&quot;,100.0); //进行存款操作 bank.deposit(500.00); //取款时密码错误，取款失败 bank.withdrawal(&quot;1234565&quot;, 200); //取款时余额不足时，取款失败 bank.withdrawal(&quot;654321&quot;, 1000.00); //取款时密码正确，余额充足，取款成功 bank.withdrawal(&quot;654321&quot;, 200.00); //调用静态方法，银行打印道别语句 Bank.welcomeNext(); &#125; &#125;]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序入门社团简介]]></title>
    <url>%2F2019%2F02%2F11%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8%E7%A4%BE%E5%9B%A2%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[微信小程序简介微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。 编译工具简介为了帮助开发者简单和高效地开发和调试微信小程序，我们在原有的公众号网页调试工具的基础上，推出了全新的 微信开发者工具，集成了公众号网页调试和小程序调试两种开发模式。 编译工具使用步骤 入门hello world 制作一个小程序材料准备 写代码 上传 总结小程序其实就是根据网页设计的HTML和css进行一种修改。]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 new year flag]]></title>
    <url>%2F2019%2F02%2F02%2F2019-new-year-flag%2F</url>
    <content type="text"><![CDATA[完成一项以后 后面画一个对勾 独立开发一个微信小程序 学习轮滑 教会弟弟妹妹轮滑 学会滑板 教会弟弟妹妹滑板 学习一门主流框架 微信公共号开始一周一次 减肥三十斤 追一年princess 合伙开发一个校园app 学习一些新东西 得到一份好的实习机会 给社团以后的发展铺好路 一个月更新二篇博客（2019/2/2 21:26 未完待续 ）]]></content>
      <tags>
        <tag>2019 flag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[two]]></title>
    <url>%2F2019%2F01%2F25%2Ftwo%2F</url>
    <content type="text"><![CDATA[海底月是天上月，眼前人是心上人。向来心是看客心，奈何人是剧中人。 –张爱玲《倾城之恋》 我希望有个如你一般的人 如山间清爽的风 如古城温暖的光 从清晨到夜晚 由山野到书房 只要最后是你 就好 –张嘉佳《从你的全世界路过》 我最讨厌说的就是本可以三个字，状况都发生了才说本可以有个屁用！ –肖海洋《一起同过窗》 所谓朋友，就是在看似一成不变中悄悄靠近，幡然醒悟之时，却已反常到无话不谈。 –毕十三《一起同过窗》 我们精心策划，按部就班，等待某一时刻的发生，也许它真的发生了，却和你想象的有点不一样。 –路桥川《一起同过窗》 我真的好讨厌你，讨厌你这么喜欢另一个女生，我讨厌你对我无视的态度，我讨厌你忘记我，我好讨厌你，真的好讨厌你。 –林洛雪《一起同过窗》 如果爱情不光是甜蜜，同样有伤痕，有痛苦，那我的毫无保留，到底值不值得。 –顾一心《一起同过窗》 其实你的内心，比其他人要执着许多，只是缺少果断，所以别的人会走的很快，而你会走的很长。 –叶吉平《一起同过窗》 “不舍”和“留恋”怎么会一样呢？况且你做到的是“不”和“舍”，而我想要的是“留”和“恋”。 –李殊词《一起同过窗》 但是，我虽然烂，我每次喜欢上一个女孩的时候，我都真心地觉得她是一个很可爱的姑娘。或者说，在我眼里，每个女孩子都有可爱的一面，我从来不觉得女孩子有任何的缺点。 –任逸帆《一起同过窗》 我曾以为黎明之后，太阳就会升起，就会有光。最近才知道，原来黑夜和黎明之前，还有一个时刻，叫破晓。破晓之后，新的一天才正式开始。 –钟白《一起同过窗》]]></content>
      <tags>
        <tag>优美句子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java编程基础]]></title>
    <url>%2F2019%2F01%2F25%2FJava%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[Java的基本语法Java代码的基本格式 Java中的程序代码可分为结构定义语句和功能执行语句，其中，结构定义语句用于声明一个类或者方法，功能执行语句用于实现具体的功能。每条功能执行语句的最后都必须用英文分号(;)结束。 Java语言严格区分大小写。 为了便于阅读，尽量使自己的代码整齐美观、层次清晰。 Java程序中一个太长的字符串不能分开在二行中书写。为了其他原因，可以使用（+）号将二个字符串链接起来。 Java中的注释 单行注释 int a; //定义一个整形变量 多行注释 12345678/* int a; //定义一个整形变量 public static void main(String[] args)&#123; printRectangle(4,3); printRectangle(2,3); printRectangle(6,10); &#125; */ 文档注释,文档注释是以“/*”开头，并在注释内容末尾以“/”结束。文档注释是对一段代码概括性的解释说明，可以使用Javadoc命令将文档注释提取出来生成帮助文档。 Java中的标识符在编程过程中，经常需要在程序中定义一些符号来标记一些名称，如包名、类名、方法名、参数名、变量名等，这些符号被称为标识符。标识符可以由字母、数字、下划线和美元符号（$）组成，但标识符不能以数字开头，不能是Java中的关键字。 为了增加代码可读性，初学者应该遵循以下规则。 包名所有字母一律小写。例如：cn.itcast.test 类名和接口名每个单词的首字母都要大写。例如：ArrayList 常量名所有字母都大写，单词之间用下划线链接。例如：DAY_OF_MONTH 变量名和方法名的第一个单词首字母小写，从第二个单词开始，每个单词首字母大写。例如：lineNumber 在程序中，应尽量使用有意义的英文单词来定义标识符，使得程序便于阅读。例如：password表示密码 Java中的关键字关键字是编程语言里事先定义好并赋予了特殊含义的单词。 Java所有关键字：abstract、continue、for、new、switch、assert、default、goto、package（用于包的声明）、synchronized、boolean、do、if、private、this、break、double、implements、protected、throw、byte、else、import（用于引入包）、public、throws、case、enum、instanceof、return、transient、catch、extends、int、short、try、char、final、interface、static、void、class（用于类的声明）、finally、long、strictfp、volatile、const、float、native、super、while。 所有的关键字都是小写的。 程序中的标识符不能不能以关键字命名。 const和goto是保留字关键字，虽然在Java中还没有任何意义，但在程序中不能用来作为自定义的标识符。 true、false和null不属于关键字，他们是一个单独标识类型，不能直接使用。 Java中的常量常量就是在程序中固定不变的值，是不能改变的数据。在Java中，常量包括整形常量、浮点数常量、布尔常量、字符常量等。 整形变量整形变量是整数类型的数据，有二进制、八进制、十进制、十六进制4中表示形式。 二进制：由数字0和1组成的数字序列。前面要以0b或0B开头，目的是为了和十进制进行区分，如0b01101100。 八进制：以0开头并且其后由0~7范围内（包括0和7）的整数组成的数字序列，如0342。 十进制：由数字0~9范围内（包括0和9）的整数组成的数字序列，如198。 十六进制：以0x或者0X开头并且其后由0~9、A~F（包括0和9、A和F，字母不区分大小写）组成的数字序列，如0x25AF。 注意：八进制必须以0开头，十六进制必须以0X或0x开头，整数以十进制表示时，开头第一位不能是0，0本身除外。 浮点数常量浮点数常量就是在数学中用到的小数，分为float单精度浮点数和double双精度浮点数二种类型。其中，单精度浮点数后面以F或f结尾，而双精度浮点数则以D或d结尾。当然，在使用浮点数时也可以在结尾处不加任何后缀，此时，虚拟机会默认为double双精度浮点数。浮点数常量还可以通过指数形式来表示。 2e3f 3.6d 0f 3.84d 5.022e+23f 字符常量字符常量用于表示一个字符，一个字符常量要用一对英文半角格式的单引号’’引起来，它可以是英文字母、数字、标点符号以及由转义序列来表示的特殊字符。 &#39;a&#39; &#39;1&#39; &#39;&amp;&#39; &#39;\r&#39; &#39;\u0000&#39; ‘\u0000’表示一个空白字符，即单引号之间没有任何字符。之所以能这样表示，是因为Java采用的是Unicode字符集，Unicode字符以\u开头，空白字符在Unicode码中对应的值为’\u0000’。 字符串常量字符串常量用于表示一串连续的字符，一个字符串常量要用一对英文半角格式的双引号(“”)引起来。 &quot;helloworld&quot; &quot;123&quot; &quot;welcome \n xxx&quot; &quot;&quot; 一个字符串可以包含一个字符或者多个字符，也可以不包含任何字符，即长度为零。 布尔常量布尔常量即布尔型的二个值true和false，该常量用于区分一个事物的真假。 null常量null常量只有一个值null，表示对象的引用为空。 Java中的变量变量的定义在程序运行期间，随时可能产生一些临时数据，应用程序会将这些数据保存在一些内存单元中，每个内存单元都用一个标识符来标识。这些内存单元被称为变量，定义的标识符就是变量名，内存单元中存储的数据就是变量的值。 变量的数据类型Java是一门强类型的编程语言，它对变量的数据类型有严格的限定。定义变量时必须声明变量的类型，在为变量赋值时必须赋予和变量同一类型的值，否则程序会报错。 在Java中，变量的数据类型分为二种，即基本数据类型和引用数据类型。Java中所有的数据类型如下图所示： 整数类型变量整数类型变量用来存储整数数值，即没有小数部分的值。在Java中，为了给不同大小范围内的整数合理分配储存空间，整数类型分为4种不同的类型:字节型(byte)、短整型(short)、整型(int)、长整型(long)。4种类型所占的存储空间的大小以及取值范围如下图所示。 在为一个long类型的变量赋值时，所赋值的后面要加上一个字母(L或者l) 浮点数类型变量浮点数类型变量用来储存小数数值。在Java中，浮点数类型分为二类：单精度浮点数(float)和双精度浮点数(double)。double类型比float类型更精确。具体如下图所示。 字符类型变量字符类型变量用于存储一个单一字符，每个char类型的字符变量都会占有2个字节。在给char类型的变量赋值时，需要用一对英文半角格式的单引号’’把字符括起来，也可以将char类型的变量赋值为0~65535范围内的整数，计算机会自动将这些整数转化为所对应的字符。 布尔类型变量布尔类型变量用来储存布尔值，在Java中用boolean表示，该类型的变量只有二个值，即true和false。具体如下所示12boolean flag=false; //声明一个boolean类型变量，初始值为falseflag = true; //改变flag变量的值为true 变量的类型转换在程序中，当把一种数据类型的值赋予给另一种数据类型的变量时，需要进行数据类型转换。根据转换方式的不同，数据类型转换可分为二种:自动类型转换和强制类型转换。 自动类型转换自动类型转换也叫隐式类型转换，指的是二种数据类型在转换的过程中不需要显示地进行声明。要实现自动类型转换，必须同时满足二个条件，第一个是二种数据类型彼此兼容，第二是目标的类型的取值范围大于源类型的取值范围。 整数类型之间可以实现转换，如byte类型的数据可以赋值给short、int、long类型的变量，short、char类型的数据可以赋值给int、long类型的变量，int类型的数据可以赋值给long类型的变量。 整数类型转换为float类型，如byte、char、short、int类型的数据可以赋值给float类型的变量。 其他类型转换为double类型，如byte、char、short、int、long、float类型的数据可以赋值给double类型的变量。 强制类型转换强制类型转换也称为显示类型转换，指的是二种数据类型之间的转换需要进行显示的声明。当二种类型彼此不兼容，或者目标类型取值范围小于源类型时，自动类型转换无法进行，这时就需要进行强制类型转换。 需要进行强制类型转换，具体格式如下 12目标类型 变量名 = (目标类型) 值;byte b = (byte) num; 在对变量进行强制类型转换时，会发生取值范围较大的数据类型向取值范围较小的数据类型的转换，会很容易造成数据精度的丢失。 变量的作用域变量需要先定义后使用，但并不意味着在变量定义之后的语句中一定可以使用该变量。变量需要在它的作用范围内才可以被使用，这个作用范围被称为变量的作用域。在程序中，变量一定会被定义在某一对大括号中，该大括号所包含的代码区域便是这个变量的作用域。具体如下图: Java中的运算符在程序中经常出现一些特殊符号，如+、-*、/、=、&gt;等，这些特殊符号称为运算符。运算符用于对数据进行算术运算、赋值和比较等操作。在Java中，运算符可分为算术运算符、赋值运算符、比较运算符、逻辑运算符等。 算术运算符在数学运算中最常见的就是加减乘除，被称为四则运算。Java中的算术运算符就是用来处理四则运算的符号，这是最简单、最常用的运算符。Java中的算术运算符及其用法。如下图所示： 在进行自增++和自减–的运算时，如果运算符++或–放在操作数的前面则是先进行自增或自减运算，在进行其他运算。反之，如果运算符放在操作数后面则先进行其他运算在进行自增或自减运算。 在进行除法运算时，当除数和被除数都为整数时，得到的结果也是一个整数。如果除法运算有小数参与，得到的结果会是一个小数。 在进行取模(%)运算时，运算结果的正负取决于被模数(%左边的数)的符号，与模数(%右边的数)的符号无关。 赋值运算符赋值运算符的作用就是将常量、变量或表达式的值赋给某一个变量。Java中的赋值运算符及其用法如下图所示： 1234int x,y,z;x=y=z=5; //为3个变量同时赋值int a=b=c=5; //这样写是错误的 在Java中可以通过一条赋值语句对多个变量进行赋值 图中除了“=”,其他的都是特殊的赋值运算符，以“+=”为例，x+=3就相当于x=x+3,首先会进行加法运算x+3,在将运算结果赋值给变量x。 比较运算符比较运算符用于对二个数值或变量进行比较，其结果是一个布尔值，即true或false。Java中的比较运算符及其用法。如下图所示： 注意，不能将比较运算符“==”误写成赋值运算符“=”。 逻辑运算符逻辑运算符用于对布尔型的数据进行操作，其结果仍是一个布尔数据。Java中的逻辑运算符及其用法。如下图所示： 逻辑运算符可以针对结果为布尔值的表达式进行运算。 运算符”&amp;”和”&amp;&amp;”都表示与操作，当且仅当运算符两边操作数都为true时，其结果才为true，否则结果为false。当运算符“&amp;”和“&amp;&amp;”的右边为表达式时，二者在使用上还有一定的区别。在使用“&amp;”进行运算时，无论左边为true或者false，右边的表达式都会进行运算。如果使用“&amp;&amp;”进行运算，当左边为false时，右边的表达式则不会进行运算，因此“&amp;&amp;”被称为短路与。 运算符“|”和“||”都表示或操作，当运算符两边的操作数任何一边的值为true时，其结果为true；当两边的值都为false时，其结果才为false。同与操作类似，“||”表示短路或，当运算符“||”的左边为true时，右边的表达式就不会进行运算。 运算符“^”表示异或操作，当运算符两边的布尔值相同时（都为true或都为false），其结果为false。当两边布尔值不相同时，其结果为true。 运算符的优先级在对一些比较复杂的表达式进行运算时，要明确表达式所有运算符参与运算的先后顺序，通常把这种顺序称作运算符的优先级。Java中的运算符的优先级具体如下图所示： 在编写程序时，尽量使用括号“()”来实现想要的运算顺序，以免产生歧义。 选择结构语句Java中有一种特殊的语句叫作选择语句，它需要对一些条件做出判断，从而决定执行哪一段代码。 if条件语句if语句if语句是指如果满足某种条件，就进行某种处理。123if(条件语句)&#123; 代码块&#125; 判断条件是一个布尔值，当判断条件为true时，{}中的执行语句才会执行。if语句的执行流程如下图所示： if…else语句if…else语句是指如果满足某种条件，就进行某种处理，否则就进行另一种处理。 1234567if(判断语句)&#123; 执行语句1 ...&#125;else&#123; 执行语句2 ...&#125; 判断条件是一个布尔值，当判断条件为true时，if后面{}中的执行语句1会执行。当判断条件为false时，else后面{}中的执行语句2会执行。if…else语句的执行流程图如下图所示： 在Java中有一种特殊的运算叫作三元运算，它和if-else语句类似， “判断条件?表达式1:表达式2” 三元运算会得到一个结果，通常用于对某个变量进行赋值，当判断条件成立时，运算结果为表达式1的值，否则结果为表达式2得值。 if…elseif…else语句if…else if…else语句用于多个条件进行判断，进行多种不同得处理。1234567891011if(判断条件1)&#123; 执行语句1&#125;else if(判断条件2)&#123; 执行语句2&#125;...else if(判断条件n)&#123; 执行语句n&#125;else&#123; 执行语句n+1&#125; switch条件语句switch条件语句也是一种很常见得选择语句，和if条件语句不同，它只能针对某个表达式的值做出判断，从而决定程序执行那一段代码。 123456789101112131415switch(表达式)&#123; case 目标值1: 执行语句1 break; case 目标值2: 执行语句2 break; ... case 目标值n: 执行语句n break; default: 执行语句n+1 break;&#125; 在上面的格式中，switch语句将表达式的值与每个case中的目标值进行匹配，如果找到了匹配的值，会执行对应case后的语句；如果没找到任何匹配的值，就会执行default后的语句。 循环结构语句在Java中有一种特殊的语句叫做循环语句，它可以实现将一段代码重复执行。 while循环语句while语句会反复地进行条件判断，只要条件成立，{}内的执行语句就会执行，直到条件不成立，while循环结束。1234while(循环条件)&#123; 执行语句 ...&#125; 在上面的语法结构中，{}中的执行语句被称作循环体，循环体是否执行取决于循环条件。当循环条件为true时，循环体就会执行。循环体执行完毕时会继续判断循环条件，如条件仍为true则会执行，直到循环条件为false时，整个循环过程才会结束。 do…while循环语句do…while循环语句和while循环语句类似。1234do&#123; 执行语句 ...&#125;while(循环条件); 在上面的语法结构中，关键字do后面{}中的执行语句是循环体。do…while循环语句将循环条件放在了循环体的后面。这就意味着，循环体会无条件执行一次，然后在根据循环条件来决定是否继续执行。do…while循环的执行流程如下图所示： for循环语句for循环语句是最常用的循环语句，一般用在循环次数已知的情况下。 1234for(初始化表达式;循环条件;操作表达式)&#123; 执行语句 ...&#125; 在上面的语法结构中，for关键字后面()中包括了3部分内容—初始化表达式、循环条件和操作表达式,它们之间用(;)分隔，{}中的执行语句为循环体。 1表示初始化表达式，2表示循环条件，3表示操作表达式，4表示循环体，通过序号来具体分析for循环的执行流程。具体如下： 12345678for(1;2;3)&#123; 4&#125;第一步，执行1第二步，执行2，如果判断结果为true，执行第三步，如果判断结果为false，执行第五步第三步，执行4第四步，执行3，然后重复执行第二步第五步，退出循环 循环嵌套嵌套循环是指在一个循环语句的循环体中在定义一个循环语句的语法结构。while、do…while、for循环语句都可以进行嵌套，并且它们之间也可以相互嵌套，其中最常见的是在for循环中嵌套for循环，格式如下。12345678for(初始化表达式;循环条件;操作表达式)&#123; ... for(初始化表达式;循环条件;操作表达式)&#123; 执行语句 ... &#125; ...&#125; 跳转语句（break，continue）跳转语句用于实现循环执行过程中程序流程的跳转。 break语句在switch条件语句和循环语句中都可以使用break语句。当它出现在switch条件语句中时；作用是终止某个case并跳出switch结构。当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。 当break语句出现在嵌套循环中的内层循环，它只能跳出内层循环，如果想使用break语句跳出外层循环，则需要对外层循环添加标记。使用break itcast；语句跳出外层循环。 continue语句continue语句用在循环语句中，它的作用是终止本次循环，执行下一次循环，在循环嵌套语句中，continue语句后面也可以使用标记的方式结束本此外层循环，用法与break语句相似。 方法什么是方法方法就是一段可以重复调用的代码，有些书里也会把方法称为函数。在Java中，声明一个方法的具体语法格式如下： 12345修饰符 返回值类型 方法名 ([参数类型 参数1，参数类型 参数2，...])&#123; 执行语句 ... return 返回值;&#125; 修饰符:方法的修饰符比较多，有对访问权限进行限定的，有静态修饰符static，还有最终修饰符final等。 返回值类型:用于限定方法返回值的数据类型。 参数类型:用于限定调用方法时传入参数的数据类型。 参数名:是一个变量，用于接收调用方法时传入的数据。 return关键字:用于结束方法以及返回指定类型的值。 返回值:被return语句返回的值，该值会返回给调用者。 需要注意的是，方法中的“参数类型 参数1，参数类型 参数2”被称为参数列表，它用于描述方法在被调用时需要接收的参数。如果方法不需要接收任何参数，则参数列表为空，即()内不写任何内容。方法的返回值必须为方法的返回值类型，如果方法中没有返回值，返回值类型要声明为void，此时，方法中return语句可以省略。 方法的重载Java中允许在一个程序中定义多个名称相同的方法，但是参数的类型或个数必须不同，这就是方法的重载。 方法的重载与返回值类型无关，它需要满足二个条件，一是方法名相同，二是参数个数或参数类型不相同。 数组数组是指一组数据的集合，数组中的每个数据被称为元素。数组可以存放任意类型的元素，但同一个数组里存放的元素类型必须一致。 数组的定义在定义数组时只指定数组的长度，由系统自动为元素赋初值的方式称作动态初始化。在初始化数组时还有一种方式叫作静态初始化，就是在定义数组的同时就为数组的每个元素赋值。数组的静态初始化有二种方式，具体如下： 121.类型[] 数组名 = new 类型[]&#123;元素,元素,.....&#125;;2.类型[] 数组名 = &#123;元素,元素,.....&#125;; 建议使用第二种方式 当数组被成功创建以后，数组中元素会被自动赋予一个默认值，根据元素类型的不同，默认初始化的值也是不一样的。具体如下图: 数组的常见操作数组遍历在操作数组时，经常需要依此访问数组中的每个元素，这种操作称为数组的遍历。 数组最值在操作数组时，经常需要获取数组元素的最值。 数组排序在操作数组时，经常需要对数组中的元素进行排序。 冒泡排序，不断地比较数组相邻的两个元素，较小者向上浮，较大者往下沉，整个过程和水中气泡上升的原理相似。 多维数组多维数组可以简单地理解为在数组中嵌套数组。 第一种方式: int[][] arr = new int[3][4]; 第二种方式: int[][] arr = new int[3][]; 第三种方式: 1int[][] arr = &#123;&#123;1,2&#125;,&#123;3,4,5,6&#125;,&#123;7,8,9&#125;&#125; 总结情不知所起 一往情深 怎奈何 如花美眷 终不敌 似水流年 缘莫明以由 两厢缘孽 更那堪 拟仙娇娥 难留恋 风花雪月 商场库存清单程序设计12345678910111213141516171819202122232425262728293031323334353637383940//计算商城库存清单功能的实现代码package cn.itcast.chapter01;public class StoreList &#123; public static void main(String[] args)&#123; //苹果笔记本电脑 String macBrand = &quot;MacBookAir&quot;; double macSize = 13.3; double macPrice = 6988.88; String macConfig = &quot;i5处理器4GB内存128G固态硬盘&quot;; int macCount = 5; //联想Thinkpad笔记本电脑 String thinkpadBrand = &quot;ThinkpadT450&quot;; double thinkpadSize = 14.0; double thinkpadPrice = 5999.99; String thinkpadConfig = &quot;i5处理器4GB内存500G硬盘&quot;; int thinkpadCount = 10; //华硕ASUS笔记本电脑 String ASUSBrand = &quot;ASUS-FL5800&quot;; double ASUSSize = 15.6; double ASUSPrice = 4999.50; String ASUSConfig = &quot;i7处理器4GB内存500G固态硬盘&quot;; int ASUSCount = 18; //列表头部 System.out.println(&quot;----------------------------商城库存清单------------------------------&quot;); System.out.println(&quot;品牌型号 尺寸 价格 配置 &quot; + &quot; 库存数&quot;); //列表中部 System.out.println(macBrand+&quot; &quot;+macSize+&quot; &quot;+macPrice+&quot; &quot;+macConfig+&quot; &quot;+macCount); System.out.println(thinkpadBrand+&quot; &quot;+thinkpadSize+&quot; &quot;+thinkpadPrice+&quot; &quot;+thinkpadConfig+&quot; &quot;+thinkpadCount); System.out.println(ASUSBrand+&quot; &quot;+ASUSSize+&quot; &quot;+ASUSPrice+&quot; &quot;+ASUSConfig+&quot; &quot;+ASUSCount); //统计总库存数、库存金额 int totalCount = macCount + thinkpadCount + ASUSCount; double totalMoney = (macCount*macPrice)+(thinkpadCount*thinkpadPrice)+(ASUSCount*ASUSPrice); //列表底部 System.out.println(&quot;--------------------------------------------------------------------&quot;); System.out.println(&quot;总库存数:&quot;+totalCount); System.out.println(&quot;库存商品总金额:&quot;+totalMoney); &#125; &#125; 猜数字游戏12345678910111213141516171819202122232425262728293031package cn.itcast.chapter01;import java.util.Random;import java.util.Scanner;public class GuessNumber &#123; public static void main(String[] args)&#123; //1.通过Random类中的nextInt(int n)方法，生成一个0~9的随机数 int randomNumber =new Random().nextInt(10); System.out.println(&quot;随机数已生成!&quot;); //2.输入猜的数字 System.out.println(&quot;----请输入你猜的数字:----&quot;); Scanner sc = new Scanner(System.in); int enterNumber = sc.nextInt(); //3.通过while循环，进行猜数字对错判断 //猜对，跳出循环，游戏结束 while (enterNumber != randomNumber)&#123; //猜错了，根据结果，给出提示，接着猜数字，游戏继续 if(enterNumber &gt; randomNumber)&#123; //如果猜大了，打印sorry，您猜大了！继续下一次循环 System.out.println(&quot;sorry 您猜大了！&quot;); &#125;else&#123; //如果猜小了，打印sorry，您猜小了！继续下一次循环 System.out.println(&quot;sorry 您猜小了！&quot;); &#125; //输入猜的数字 System.out.println(&quot;----请输入你猜的数字:----&quot;); enterNumber = sc.nextInt(); &#125; System.out.println(&quot;您猜对了！&quot;); &#125;&#125; 随机点名器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package cn.itcast.chapter01;import java.util.Random;import java.util.Scanner;public class CallName &#123; /** * 1.储存全班同学姓名 * 创建一个存储多个同学姓名的容器（数组） * 键盘输入每个同学的姓名，储存到容器中（数组） * @param students */ public static void addStudentName(String[] students)&#123; //键盘输入多个同学姓名储存到容器中 Scanner sc = new Scanner(System.in); for(int i=0;i&lt;students.length;i++)&#123; System.out.println(&quot;储存第&quot;+(i+1)+&quot;个名字：&quot;); //接收控制台录入的姓名字符串 students[i]=sc.next(); &#125; &#125; /** * 2.总览全班同学姓名 * */ public static void printStudentName(String[] students)&#123; //遍历数组，得到每个同学的姓名 for(int i=0;i&lt;students.length;i++)&#123; String name = students[i]; //打印同学姓名 System.out.println(&quot;第&quot;+(i+1)+&quot;个学生姓名：&quot;+name); &#125; &#125; /* * 3.随机点名其中一人 */ public static String randomStudentName(String[] students)&#123; //根据数组长度，获取随机索引 int index = new Random().nextInt(students.length); //通过随机索引从数组中获取姓名 String name = students[index]; //返回随机点到的姓名 return name; &#125; public static void main(String[] arg)&#123; System.out.println(&quot;------------随机点名器------------&quot;); String[] students = new String[3]; /* * 1.储存全班同学姓名 */ addStudentName(students); /* * 2.总览全班同学姓名 */ printStudentName(students); /* * 3.随机点名其中一人 */ String randomName=randomStudentName(students); System.out.println(&quot;被点到名的同学是：&quot;+randomName); &#125;&#125;]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java开发入门问题及解决方案]]></title>
    <url>%2F2019%2F01%2F22%2FJava%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[JDK的安装错误及解决方案一开始把JDK安装到C盘，在C盘的安装目录下bin目录下编写第一个hello world程序的时候出现以下错误： 文件不能正常保存，需要提供管理员身份。 找不到类，需要创建的类和文件名保持一致 后缀名错误，需要把后缀名显示出来 进行编译是出错 解决方案:在C盘编写代码的时候，需要提供管理员身份，而且有些功能不能实现，所以建议把JDK安装到D盘。 （PS：不过我在安装开发工具的时候有把JDK安装到了C盘，个人感觉安装在那个盘都可以，只不过在C盘操作命令的时候比较麻烦） 系统环境变量的设置按照教材中的做法认真一点，应该不会出错。也可以自己百度一下看一下教程，大致上都是一样的。 eclipse安装错误及解决方案进入官网进行下载eclipse工具时，出现以下错误： 下载出错 安装出错 解决方案:在官网下载时需要下载的是压缩包而不是exe文件，因为网上大部分的安装教程都是将的压缩包的安装方式（ps:自己也不会其他的安装方式）安装是注意自己的安装包是32位还是64位，因为要和自己一开始安装的jdk进行版本的匹配，不同的可能导致安装出错。自己下载二个版本的eclipse压缩包就行了，一个不行换另一个安装就行了。嘻嘻。 总结错误永远都是有的，不多趟点雷，怎么会长知识呢。吃一垫，长一智。]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java开发入门]]></title>
    <url>%2F2019%2F01%2F19%2FJava%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Java概述java是一门程序设计语言 什么是Java javaSE（标准版）开发普通桌面和商务应用程序 javaEE（企业版）开发企业级应用程序 javaME（小型版）开发电子消费产品和嵌入式设备 Java语言特点 简单性 面向对象性 安全性 跨平台性（ps:一段程序可以在Windows上运行，也可以在Linux上运行） 支持多线程 JDK的使用什么是JDKSUN公司提供的一套java开发环境 Java编辑器 Java运行工具 Java文档生成工具 Java打包工具 安装JDK 百度一下（ps:尽量不要安装在C盘） 第一个Java程序编写Java源文件在JDK安装目录的bin目录下新建文本文档，重命名为HelloWorld.java。然后用记事本打开编写一段Java代码，如下所示： 12345678910class HelloWorld&#123; public stacic void mian(String[] args)&#123; System.out.println(&quot;这是第一个Java程序&quot;); &#125;&#125; 打开命令行窗口快捷键win+r,在运行窗口中输入cmd 进入JDK安装目录的bin目录使用cmd命令cd进入安装JDK目录下的bin目录 编译Java源文件使用javac命令对源文件HelloWorld.java进行编译,会在当前目录下生成HelloWorld.class字节码文件。 javac HelloWorld.java Ps：注意类名和文件名保持一致 运行Java程序使用命令java运行文件 java HelloWorld.java 运行时只要输入java HelloWorld就行 系统环境变量在计算书操作系统中可以定义一系列变量，这些变量可提供操作系统上所有应用程序使用，被称为系统环境变量。 path环境变量path环境变量是系统变量的一种，它用于保存一系列的路径，每个路径之间以分号分隔。当在命令行窗口运行一个可执行文件时，操作系统首先会在当前目录下查找该文件是否存在，如果不存在，会继续在path环境变量中定义的路径下寻找这个文件，如果仍未找到，系统会报错。 classpath环境变量classpath环境变量也用于保存一系列路径，它和path环境变量的查看与配置的方式完全相同。当Java虚拟机需要运行一个类时，会在classpath环境变量中所定义的路径下寻找所需的class文件和类包。 环境变量的设置自行百度 Java的运行机制Java程序运行时，必须经过编译和运行二个步骤。首先将后缀名为.java的源文件进行编译，生成后缀名为.class的字节码文件。然后，Java虚拟机将字节码文件进行解释执行，并将结果显示出来。 java程序是由虚拟机负责 开发工具在实际项目开发过程中，由于使用笔记本编写代码速度慢，且不容易排错，所以程序员很少用它来编写代码。为了提高程序的开发效率，大部分软件开发人员都是使用集成开发工具（IDE）来进行程序开发。 Eclipse概述eclipse是由蓝色巨人开发的一款功能完整且成熟的IDE集成开发环境，它是一个开源的、基于Java的可扩展开发平台，目前最流行的Java语言开发工具之一。 Eclipse的安装与启动 安装eclipse开发工具 启动eclipse开发工具 eclipse工作台 eclipse透视图 Eclipse进行程序开发 创建Java项目 在项目下创建包 创建Java类 编写程序代码 运行程序 总结不要好高骛远]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[one]]></title>
    <url>%2F2019%2F01%2F18%2Fone%2F</url>
    <content type="text"><![CDATA[佛家说，人有七苦，生、老、病、死、怨憎会、爱离别、求不得，离合既循环，忧喜迭相攻，佛是想说，众生本该洒脱而淡然地接受一切的阴晴圆缺，可惜，我们只是普通人，不是佛。 《一起同过窗》]]></content>
      <tags>
        <tag>优美句子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F16%2FHelloWorld%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>参考文献</tag>
      </tags>
  </entry>
</search>
